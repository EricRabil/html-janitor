{"version":3,"file":"html-janitor.min.js","mappings":"CAAA,SAAAA,EAAAC,GACA,kBAAAC,SAAAA,OAAAC,IACAD,OAAA,eAAAD,GACA,gBAAAG,SACAC,OAAAD,QAAAH,IAEAD,EAAAM,YAAAL,KAEAM,KAAA,WAMA,QAAAD,GAAAE,GAEA,GAAAC,GAAAD,EAAA,KACAE,EAAAC,OAAAC,KAAAH,GAEAI,EAAAH,EACAI,IAAA,SAAAC,GAAA,aAAAN,GAAAM,KACAC,MAAA,SAAAC,GAAA,MAAA,WAAAA,GAAA,YAAAA,GAAA,aAAAA,GAEA,KAAAJ,EACA,KAAA,IAAAK,OAAA,gCAGAX,MAAAC,OAAAA,EAKA,QAAAW,GAAAC,GACA,MAAA,KAAAC,EAAAC,QAAAF,EAAAG,UAIA,QAAAC,GAAAJ,GACA,MAAA,KAAAK,EAAAH,QAAAF,EAAAG,UAqGA,QAAAG,GAAAN,GACA,MAAAO,UAAAD,iBAAAN,EACAQ,WAAAC,UAAAD,WAAAE,aAAAF,WAAAG,aACA,MAAA,GAGA,QAAAC,GAAAZ,EAAAa,GACA,MAAA,mBAAAA,IACA,EACA,kBAAAA,IACAA,EAAAb,IAGA,EAGA,QAAAc,GAAAC,EAAAF,EAAAb,GACA,GAAAgB,GAAAD,EAAAE,KAAAC,aAEA,OAAAL,MAAA,GACA,EACA,kBAAAA,GAAAG,IACAH,EAAAG,GAAAD,EAAAI,MAAAnB,GACA,mBAAAa,GAAAG,IACA,EACAH,EAAAG,MAAA,GACA,EACA,gBAAAH,GAAAG,GACAH,EAAAG,KAAAD,EAAAI,OAGA,EA3IA,GAAAlB,IAAA,IAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,OAKAI,GAAA,IAAA,IAAA,SAAA,IAAA,KAAA,MAAA,MAAA,IAAA,SAyIA,OApIAnB,GAAAkC,UAAAC,MAAA,SAAAC,GACA,GAAAC,GAAAhB,SAAAiB,cAAA,MAKA,OAJAD,GAAAE,UAAAH,EAEAnC,KAAAuC,UAAAH,GAEAA,EAAAE,WAGAvC,EAAAkC,UAAAM,UAAA,SAAAC,GACA,GAAAC,GAAAtB,EAAAqB,GACA3B,EAAA4B,EAAAC,YACA,IAAA7B,EAEA,EAEA,KAAAA,EAAA8B,WAIA,GAAA9B,EAAA+B,WAAAC,KAAAC,UAAA,CAkBA,GAAAjC,EAAA+B,WAAAC,KAAAE,aAAA,CACAP,EAAAQ,YAAAnC,GACAb,KAAAuC,UAAAC,EACA,OAGA,GACAS,GADAC,EAAAjC,EAAAJ,EAEAqC,KACAD,EAAAE,MAAAlB,UAAAmB,KAAAC,KAAAxC,EAAAyC,WAAA1C,GAKA,IAAA2C,KAAAf,EAAAA,WACAgB,EACA5C,EAAA4B,IACA5B,EAAAC,IACA0C,EAEAvC,EAAAH,EAAAG,SAAAe,cACAL,EAAA1B,KAAAC,OAAAE,KAAAa,GAEAyC,EAAAP,GAAAD,CAIA,IAAAQ,GAAAhC,EAAAZ,EAAAa,KACA1B,KAAAC,OAAAyD,yBAAAF,EAAA,CAEA,GAAA,WAAA3C,EAAAG,UAAA,UAAAH,EAAAG,SACA,KAAAH,EAAAyC,WAAAK,OAAA,GACAnB,EAAAoB,aAAA/C,EAAAyC,WAAA,GAAAzC,EAGA2B,GAAAQ,YAAAnC,GAEAb,KAAAuC,UAAAC,EACA,OAIA,IAAA,GAAAqB,GAAA,EAAAA,EAAAhD,EAAAiD,WAAAH,OAAAE,GAAA,EAAA,CACA,GAAAjC,GAAAf,EAAAiD,WAAAD,EAEAlC,GAAAC,EAAAF,EAAAb,KACAA,EAAAkD,gBAAAnC,EAAAE,MAEA+B,GAAA,GAKA7D,KAAAuC,UAAA1B,GAGAA,EAAA8B,YAAA,MApEA,IAAA,KAAA9B,EAAAmD,KAAAC,SACApD,EAAAqD,wBAAAtD,EAAAC,EAAAqD,yBACArD,EAAAsD,oBAAAvD,EAAAC,EAAAsD,qBAAA,CACA3B,EAAAQ,YAAAnC,GACAb,KAAAuC,UAAAC,EACA,aAgEA3B,EAAA4B,EAAA2B,gBAqCArE","sources":["../src/html-janitor.js"],"sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('html-janitor', factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.HTMLJanitor = factory();\n  }\n}(this, function () {\n\n  /**\n   * @param {Object} config.tags Dictionary of allowed tags.\n   * @param {boolean} config.keepNestedBlockElements Default false.\n   */\n  function HTMLJanitor(config) {\n\n    var tagDefinitions = config['tags'];\n    var tags = Object.keys(tagDefinitions);\n\n    var validConfigValues = tags\n      .map(function(k) { return typeof tagDefinitions[k]; })\n      .every(function(type) { return type === 'object' || type === 'boolean' || type === 'function'; });\n\n    if(!validConfigValues) {\n      throw new Error(\"The configuration was invalid\");\n    }\n\n    this.config = config;\n  }\n\n  // TODO: not exhaustive?\n  var blockElementNames = ['P', 'LI', 'TD', 'TH', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'];\n  function isBlockElement(node) {\n    return blockElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  var inlineElementNames = ['A', 'B', 'STRONG', 'I', 'EM', 'SUB', 'SUP', 'U', 'STRIKE'];\n  function isInlineElement(node) {\n    return inlineElementNames.indexOf(node.nodeName) !== -1;\n  }\n\n  HTMLJanitor.prototype.clean = function (html) {\n    var sandbox = document.createElement('div');\n    sandbox.innerHTML = html;\n\n    this._sanitize(sandbox);\n\n    return sandbox.innerHTML;\n  };\n\n  HTMLJanitor.prototype._sanitize = function (parentNode) {\n    var treeWalker = createTreeWalker(parentNode);\n    var node = treeWalker.firstChild();\n    if (!node) { return; }\n\n    do {\n      // Ignore nodes that have already been sanitized\n      if (node._sanitized) {\n        continue;\n      }\n\n      if (node.nodeType === Node.TEXT_NODE) {\n        // If this text node is just whitespace and the previous or next element\n        // sibling is a block element, remove it\n        // N.B.: This heuristic could change. Very specific to a bug with\n        // `contenteditable` in Firefox: http://jsbin.com/EyuKase/1/edit?js,output\n        // FIXME: make this an option?\n        if (node.data.trim() === ''\n            && ((node.previousElementSibling && isBlockElement(node.previousElementSibling))\n                 || (node.nextElementSibling && isBlockElement(node.nextElementSibling)))) {\n          parentNode.removeChild(node);\n          this._sanitize(parentNode);\n          break;\n        } else {\n          continue;\n        }\n      }\n\n      // Remove all comments\n      if (node.nodeType === Node.COMMENT_NODE) {\n        parentNode.removeChild(node);\n        this._sanitize(parentNode);\n        break;\n      }\n\n      var isInline = isInlineElement(node);\n      var containsBlockElement;\n      if (isInline) {\n        containsBlockElement = Array.prototype.some.call(node.childNodes, isBlockElement);\n      }\n\n      // Block elements should not be nested (e.g. <li><p>...); if\n      // they are, we want to unwrap the inner block element.\n      var isNotTopContainer = !! parentNode.parentNode;\n      var isNestedBlockElement =\n            isBlockElement(parentNode) &&\n            isBlockElement(node) &&\n            isNotTopContainer;\n\n      var nodeName = node.nodeName.toLowerCase();\n      var allowedAttrs = this.config.tags[nodeName];\n\n      var isInvalid = isInline && containsBlockElement;\n\n      // Drop tag entirely according to the whitelist *and* if the markup\n      // is invalid.\n      if (isInvalid || shouldRejectNode(node, allowedAttrs)\n          || (!this.config.keepNestedBlockElements && isNestedBlockElement)) {\n        // Do not keep the inner text of SCRIPT/STYLE elements.\n        if (! (node.nodeName === 'SCRIPT' || node.nodeName === 'STYLE')) {\n          while (node.childNodes.length > 0) {\n            parentNode.insertBefore(node.childNodes[0], node);\n          }\n        }\n        parentNode.removeChild(node);\n\n        this._sanitize(parentNode);\n        break;\n      }\n\n      // Sanitize attributes\n      for (var a = 0; a < node.attributes.length; a += 1) {\n        var attr = node.attributes[a];\n\n        if (shouldRejectAttr(attr, allowedAttrs, node)) {\n          node.removeAttribute(attr.name);\n          // Shift the array to continue looping.\n          a = a - 1;\n        }\n      }\n\n      // Sanitize children\n      this._sanitize(node);\n\n      // Mark node as sanitized so it's ignored in future runs\n      node._sanitized = true;\n    } while ((node = treeWalker.nextSibling()));\n  };\n\n  function createTreeWalker(node) {\n    return document.createTreeWalker(node,\n                                     NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n                                     null, false);\n  }\n\n  function shouldRejectNode(node, allowedAttrs){\n    if (typeof allowedAttrs === 'undefined') {\n      return true;\n    } else if (typeof allowedAttrs === 'function'){\n      return !allowedAttrs(node);\n    }\n\n    return false;\n  }\n\n  function shouldRejectAttr(attr, allowedAttrs, node){\n    var attrName = attr.name.toLowerCase();\n\n    if (allowedAttrs === true){\n      return false;\n    } else if (typeof allowedAttrs[attrName] === 'function'){\n      return !allowedAttrs[attrName](attr.value, node);\n    } else if (typeof allowedAttrs[attrName] === 'undefined'){\n      return true;\n    } else if (allowedAttrs[attrName] === false) {\n      return true;\n    } else if (typeof allowedAttrs[attrName] === 'string') {\n      return (allowedAttrs[attrName] !== attr.value);\n    }\n\n    return false;\n  }\n\n  return HTMLJanitor;\n\n}));\n\n"],"names":["root","factory","define","amd","exports","module","HTMLJanitor","this","config","tagDefinitions","tags","Object","keys","validConfigValues","map","k","every","type","Error","isBlockElement","node","blockElementNames","indexOf","nodeName","isInlineElement","inlineElementNames","createTreeWalker","document","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","SHOW_COMMENT","shouldRejectNode","allowedAttrs","shouldRejectAttr","attr","attrName","name","toLowerCase","value","prototype","clean","html","sandbox","createElement","innerHTML","_sanitize","parentNode","treeWalker","firstChild","_sanitized","nodeType","Node","TEXT_NODE","COMMENT_NODE","removeChild","containsBlockElement","isInline","Array","some","call","childNodes","isNotTopContainer","isNestedBlockElement","isInvalid","keepNestedBlockElements","length","insertBefore","a","attributes","removeAttribute","data","trim","previousElementSibling","nextElementSibling","nextSibling"]}